require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RafflesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Raffle. As you add validations to Raffle, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {:title => Faker::Commerce.product_name,
                            :description => Faker::Lorem.paragraphs(paragraph_count = Random.rand(1..10)).join('<br>'),
                            :ticket_price => Random.rand(0..10000.0),
                            :end_time => (Time.now + Random.rand(1..1000.hours)),
                            :user_id => 1} }

  let(:invalid_attributes) { {:title => ''} }
  let(:valid_session) { {} }

  describe "GET #welcome" do

  end

  describe "GET #index" do
    it "assigns all raffles as @raffles, for a URL with no additional parameters" do
      raffle = Raffle.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:raffles)).to eq([raffle])
    end

    it "assigns raffles associated with user, if the URL looks like /raffles/a-user-name" do
      # raffle1 = Raffle.create! valid_attributes
      # get :index, {:user_name => raffle1.name }
    end
  end

  describe "GET #show" do
    it "assigns the requested raffle as @raffle" do
      raffle = Raffle.create! valid_attributes
      get :show, {:id => raffle.to_param}, valid_session
      expect(assigns(:raffle)).to eq(raffle)
    end
  end

  describe "GET #new" do
    it 'cannot be accessed unless user is signed in' do
      get :new, {}, valid_session
      expect(response).to redirect_to('/users/sign_in')
      expect(assigns(:raffle)).to be_nil
    end

    it "assigns a new raffle as @raffle" do
      login_user
      get :new, {}, valid_session
      expect(assigns(:raffle)).to be_a_new(Raffle)
    end
  end

  describe "GET #edit" do
    before(:each) do
      login_user
    end

    it "assigns the requested raffle as @raffle" do
      raffle = Raffle.create! valid_attributes
      get :edit, {:id => raffle.to_param}, valid_session
      expect(assigns(:raffle)).to eq(raffle)
    end
  end

  describe "POST #create" do
    before(:each) do
      login_user
    end

    context "with valid params" do
      it "creates a new Raffle" do
        expect {
          post :create, {:raffle => valid_attributes}, valid_session
        }.to change(Raffle, :count).by(1)
      end

      it "assigns a newly created raffle as @raffle" do
        post :create, {:raffle => valid_attributes}, valid_session
        expect(assigns(:raffle)).to be_a(Raffle)
        expect(assigns(:raffle)).to be_persisted
      end

      it "redirects to the created raffle" do
        post :create, {:raffle => valid_attributes}, valid_session
        expect(response).to redirect_to(Raffle.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved raffle as @raffle" do
        post :create, {:raffle => invalid_attributes}, valid_session
        expect(assigns(:raffle)).to be_a_new(Raffle)
      end

      it "re-renders the 'new' template" do
        post :create, {:raffle => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do

    before(:each) do
      login_user
    end

    context "with valid params" do
      let(:new_attributes) { {:title => 'Cool Title',
                              :description => Faker::Lorem.paragraphs(paragraph_count = Random.rand(1..10)).join('<br>'),
                              :ticket_price => Random.rand(0..10000.0),
                              :end_time => (Time.now + Random.rand(1..1000.hours)),
                              :user_id => 1} }

      it "updates the requested raffle" do
        raffle = Raffle.create! valid_attributes
        put :update, {:id => raffle.to_param, :raffle => new_attributes}, valid_session
        raffle.reload
        raffle.title.should == 'Cool Title'
      end

      it "assigns the requested raffle as @raffle" do
        raffle = Raffle.create! valid_attributes
        put :update, {:id => raffle.to_param, :raffle => valid_attributes}, valid_session
        expect(assigns(:raffle)).to eq(raffle)
      end

      it "redirects to the raffle" do
        raffle = Raffle.create! valid_attributes
        put :update, {:id => raffle.to_param, :raffle => valid_attributes}, valid_session
        expect(response).to redirect_to(raffle)
      end
    end

    context "with invalid params" do
      it "assigns the raffle as @raffle" do
        raffle = Raffle.create! valid_attributes
        put :update, {:id => raffle.to_param, :raffle => invalid_attributes}, valid_session
        expect(assigns(:raffle)).to eq(raffle)
      end

      it "re-renders the 'edit' template" do
        raffle = Raffle.create! valid_attributes
        put :update, {:id => raffle.to_param, :raffle => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    before(:each) do
      login_user
    end

    it "destroys the requested raffle" do
      raffle = Raffle.create! valid_attributes
      expect {
        delete :destroy, {:id => raffle.to_param}, valid_session
      }.to change(Raffle, :count).by(-1)
    end

    it "redirects to the raffles list" do
      raffle = Raffle.create! valid_attributes
      delete :destroy, {:id => raffle.to_param}, valid_session
      expect(response).to redirect_to(raffles_url)
    end
  end

end
